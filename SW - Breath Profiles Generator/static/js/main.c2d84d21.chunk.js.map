{"version":3,"sources":["SVGpath.jsx","App.jsx","index.js"],"names":["SVGPath","componentWillMount","totalLength","getTotalLength","getOffsetLength","props","progress","this","points","reduce","total","point","i","distance","p1","p2","dy","y","dx","x","Math","sqrt","d","pathStyles","color","trace","strokeWidth","strokeDasharray","strokeDashoffset","fill","stroke","style","Component","defaultProps","startPoint","endPoint","xRange","yRange","xUiRange","yUiRange","xRatio","yRatio","Point","pointStyle","left","bottom","pointS","width","size","height","top","className","PointData","idx","Input","value","step","type","required","onInput","name","placeholder","Button","onClick","onDelete","multPS","t","p","addPoints","p0","subPoints","getM","mag","p0p1","p1p2","createHermitePath","wantedPoints","slice","map","Number","getInterPoint","p3","m1","m2","getHermitePolynomFn","_","range","App","renderWantedPoints","state","key","renderPath","path","e","target","setState","onPointInput","newPoint","onFileLoad","fileReader","FileReader","onloadend","savedState","JSON","parse","result","err","console","error","readAsText","files","createTextFile","paths","flatten","xs","ys","finalXs","finalYs","Everpolate","linear","vels","yVal","push","round","abs","min","vel","finalText","join","output","addWantedPoint","preventDefault","clone","sortedPoints","sortBy","reset","editWantedPoint","removeWantedPoint","wantedPoint","remove","graphSizingStyle","Row","Col","transform","Table","Form","onSubmit","href","stringify","download","accept","onChange","rows","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2d84d21.chunk.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\r\n\r\n\r\nconst DEFAULT_STROKE_WIDTH = 0.15;\r\nconst DEFAULT_STROKE_COLOR = '#e1e1e1';\r\n/**\r\n * SVGPath is an svg <path> element with utitlities\r\n *\r\n * @param {object[]} points - Array of Point objects - {x, y} - to plot this path\r\n * @param {string} color - stroke color of path\r\n * @param {number} [strokeWidth = DEFAULT_STROKE_WIDTH] - Width of the path\r\n * @param {boolean} [trace = false] - Will set the strokeDashOffset and strokeDashArray to the Path.getTotalLength\r\n *                                    so the path can appear to \"trace\" over itself\r\n * @param {number} [progress] - (min: 0, max: 1) Determines how far the \"trace\" effect has progressed. This should\r\n *                              increase in small intervals if trying to animate.\r\n * @returns {SVGPath} - svg <path> react component.\r\n */\r\nexport default class SVGPath extends Component {\r\n\r\n\r\n  static defaultProps = {\r\n    color: DEFAULT_STROKE_COLOR,\r\n    strokeWidth: DEFAULT_STROKE_WIDTH,\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    this.totalLength = this.getTotalLength();\r\n  }\r\n\r\n  getOffsetLength = () => {\r\n    return this.totalLength - (\r\n      this.totalLength * this.props.progress\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Should calculate the same value as the DOM Path.getTotalLength() method\r\n   *\r\n   * @returns {number} - Total length of all points\r\n   */\r\n  getTotalLength() {\r\n    return this.props.points.reduce((total, point, i, points) => {\r\n\r\n      // if this isn't the first point\r\n      if (i) {\r\n        return this.distance(points[i - 1], point) + total;\r\n      }\r\n      return total;\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Calculate the distance between two points on a plane\r\n   *\r\n   * @param {object} p1 - first point object {x, y}\r\n   * @param {object} p2 - second point object {x, y}\r\n   * @returns {number} - distance between <p1> and <p2>\r\n   */\r\n  distance(p1, p2) {\r\n    let\r\n      dy = p1.y - p2.y,\r\n      dx = p1.x - p2.x;\r\n    // Pythagorean Theorem\r\n    return Math.sqrt(\r\n      (dx * dx) + (dy * dy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reduce all points into a string for plotting the svg <path>\r\n   *\r\n   * @returns {string} - All points to use as d attribute of an svg path\r\n   */\r\n  d() {\r\n    const {points} = this.props;\r\n\r\n    return points.reduce(\r\n      (d, point) => `${d}L${point.x},${point.y}`,\r\n      `M${points[0].x},${points[0].y}`\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {color, trace, strokeWidth} = this.props;\r\n\r\n    let pathStyles;\r\n    if (trace) {\r\n      // line needs to appear to draw itself\r\n      pathStyles = {\r\n        strokeDasharray: this.totalLength,\r\n        strokeDashoffset: this.getOffsetLength(),\r\n      };\r\n    }\r\n\r\n    return (\r\n      <path\r\n        fill=\"transparent\"\r\n        stroke={color}\r\n        strokeWidth={strokeWidth}\r\n        d={this.d()}\r\n        style={pathStyles}\r\n        />\r\n    );\r\n  }\r\n}","import React from 'react';\nimport {\n  Row,\n  Col,\n  Button,\n  Input,\n  Form,\n  Table,\n  Container\n} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport _ from 'lodash';\n\nimport SVGpath from './SVGpath';\nimport Everpolate from 'everpolate';\n\nimport './App.css';\n\nconst startPoint = { x: 0, y: 0 };\nconst endPoint = { x: 10, y: 0 };\n\nconst xRange = { min: 0, max: 10 };\nconst yRange = { min: 0, max: 255 };\n\nconst xUiRange = { min: 0, max: 600 };\nconst yUiRange = { min: 0, max: 300 };\n\nconst xRatio = xUiRange.max / xRange.max;\nconst yRatio = yUiRange.max / yRange.max;\n\nconst Point = (props) => {\n  const pointStyle = {\n    left: `${props.x * xRatio}px`,\n    bottom: `${props.y * yRatio}px`,\n  }\n  const pointS = {\n    width: `${props.size}px`,\n    height: `${props.size}px`,\n    left: `${props.size/2}px`,\n    top: `${props.size/2}px`,\n  };\n\n  return (\n    <div style={pointStyle} className=\"wanted-point-container\">\n      <div style={pointS} className=\"wanted-point\"/>\n    </div>\n  );\n}\n\nconst PointData = props => {\n  return (\n    <tr>\n      <td>{props.idx + 1}</td>\n      <td>\n        <Input value={props.x} step={0.5} type=\"number\" required onInput={props.onInput} name=\"x\" placeholder=\"X\"></Input>\n      </td>\n      <td>\n        <Input value={props.y} step={10} type=\"number\" required onInput={props.onInput} name=\"y\" placeholder=\"Y\"></Input>\n      </td>\n      <td><Button onClick={props.onDelete} className=\"btn-sm\" color=\"danger\">X</Button></td>\n    </tr>\n  );\n}\n\nconst multPS = (t, p) => ({ x: t * p.x, y: t * p.y });\nconst addPoints = (p0, p1) => ({ x: p0.x + p1.x, y: p0.y + p1.y });\nconst subPoints = (p0, p1) => ({ x: p0.x - p1.x, y: p0.y - p1.y });\n\nconst getM = (p0, p1, p2, mag) => {\n  if (!p0 || !p1 || p1.y >= yRange.max || p1.y <= yRange.min) {\n    return { x: mag, y: 0 };\n  }\n  const p0p1 = multPS(1, subPoints(p1, p0));\n  const p1p2 = multPS(1, subPoints(p2, p1));\n  return multPS(0.5, addPoints(p0p1, p1p2));\n}\n\nconst getHermitePolynomFn = (p0, p1, p2, p3, mag) => t => {\n  const m1 = getM(p0, p1, p2, mag);\n  const m2 = getM(p1, p2, p3, mag);\n  const pointsToSum = [\n    multPS(2*t*t*t - 3*t*t +1, p1),\n    multPS(t*t*t -2*t*t + t, m1),\n    multPS(-2*t*t*t + 3*t*t, p2),\n    multPS(t*t*t - t*t, m2)\n  ];\n  return pointsToSum.reduce(addPoints, { x: 0, y: 0 });\n}\n\nconst createHermitePath = (wantedPoints, mag) => {\n  const pointsBetween = 100;\n  return wantedPoints.slice(1).map((point, idx) => {\n    const i = Number(idx) + 2;\n    const getInterPoint = getHermitePolynomFn(\n      wantedPoints[i-3],\n      wantedPoints[i-2],\n      wantedPoints[i-1],\n      wantedPoints[i],\n      mag\n    );\n    return _.range(0, 1, 1 / pointsBetween).map(t => getInterPoint(t));\n  });\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      wantedPoints: [\n        startPoint,\n        endPoint\n      ],\n      newPoint: { x: 1, y: 0 },\n      mag: 6,\n      output: \"\"\n    };\n  }\n  renderWantedPoints = () => {\n    return this.state.wantedPoints.map((point, idx) =>\n      <Point key={`p-${idx}`} x={point.x} y={point.y}/>\n    )\n  }\n  renderPath = () => {\n    const paths = createHermitePath(this.state.wantedPoints, this.state.mag)\n    return paths.map(path =>\n      <SVGpath\n        className=\"path\"\n        color=\"#555555\"\n        points={path.map(point => ({ x: point.x * xRatio, y: point.y * yRatio}))}\n        strokeWidth={3}\n        progress={1}\n        trace={false}\n      />\n    )\n  }\n  onInput = e => {\n    const { name, value } = e.target;\n    const state = this.state;\n    state[name] = value\n    this.setState(state);\n  }\n  onPointInput = e => {\n    const { name, value } = e.target;\n    const { newPoint }= this.state;\n    newPoint[name] = value;\n    this.setState({ newPoint })\n  }\n  onFileLoad = e => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = () => {\n      try {\n        const savedState = JSON.parse(fileReader.result);\n        this.setState(savedState);\n      } catch(err) {\n        console.error(\"Json is corrupted\");\n      }\n    }\n\n    fileReader.readAsText(e.target.files[0]);\n  }\n  createTextFile = () => {\n    const amountOfPoints = 500;\n    const step = xRange.max / amountOfPoints;\n    const paths = createHermitePath(this.state.wantedPoints, this.state.mag);\n    const path = _.flatten(paths);\n    const xs = path.map(point => point.x);\n    const ys = path.map(point => point.y);\n    let finalXs = _.range(0, xRange.max, step);\n    let finalYs = Everpolate.linear(finalXs, xs, ys);\n    let vels = finalYs.slice(1).map((yVal, idx) => (yVal - finalYs[idx]) / step);\n    vels.push(0);\n    finalYs = finalYs.map(Math.round).map(Math.abs).map(yVal => Math.min(yVal, yRange.max));\n    vels = vels.map(vel => vel / 5).map(vel => vel + 128).map(Math.round);\n\n    const posPrefix = \"byte pos[profile_length]={\";\n    const velPrefix = \"byte vel[profile_length]={\";\n    const posEnd = \"};\";\n    const finalText = `${posPrefix}${finalYs.join(\",\")}${posEnd}\\n${velPrefix}${vels.join(\",\")}${posEnd}`;\n\n    this.setState({ output: finalText });\n  }\n  addWantedPoint = e => {\n    e.preventDefault();\n    const { wantedPoints, newPoint } = this.state;\n    wantedPoints.push(_.clone(newPoint));\n    const sortedPoints = _.sortBy(wantedPoints, point => Number(point.x));\n    newPoint.x = Number(newPoint.x) + 1;\n    this.setState({ wantedPoints: sortedPoints, newPoint });\n    e.target.reset();\n  }\n  editWantedPoint = idx => e => {\n    const { name, value } = e.target;\n    const { wantedPoints } = this.state;\n    wantedPoints[idx][name] = value;\n    this.setState({ wantedPoints });\n  }\n  removeWantedPoint = point => () => {\n    const { wantedPoints } = this.state;\n    this.setState({ wantedPoint: _.remove(wantedPoints, point) });\n  }\n\n  render() {\n    const graphSizingStyle = {\n      width: `${xUiRange.max - xUiRange.min}px`,\n      height: `${yUiRange.max - yUiRange.min}px`\n    }\n    return (\n      <>\n        <div className=\"ml-4 mr-4 app\">\n          <Row>\n          <Col xs=\"6\">\n          <div style={graphSizingStyle} className=\"graph-area\">\n            {this.renderWantedPoints()}\n            <svg style={graphSizingStyle} transform=\"scale(1,-1)\">\n              {this.renderPath()}\n            </svg>\n          </div></Col>\n          <Col xs=\"6\" className=\"text-center\">\n            <Table className=\"main-table table-bordered table-sm mt-4\">\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>X</th>\n                  <th>Y</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.wantedPoints.map((point, idx) => (\n                  <PointData\n                    onDelete={this.removeWantedPoint(point)}\n                    onInput={this.editWantedPoint(idx)}\n                    idx={idx}\n                    key={`pd-${idx}`}\n                    x={point.x}\n                    y={point.y}\n                  />\n                ))}\n              </tbody>\n            </Table>\n          </Col>\n          </Row>\n          <Row>\n            <Col xs=\"6\">\n              <Form onSubmit={this.addWantedPoint}>\n                <Row className=\"mt-4\">\n                  <Col>\n                    <Input value={this.state.newPoint.x} type=\"number\" required onInput={this.onPointInput} name=\"x\" placeholder=\"X\"></Input>\n                  </Col>\n                  <Col>\n                    <Input type=\"number\" required onInput={this.onPointInput} name=\"y\" placeholder=\"Y\"></Input>\n                  </Col>\n                  <Button type=\"submit\" color=\"success\">+</Button>\n                </Row>\n              </Form>\n              <Row className=\"justify-content-center mt-4\">\n                <Button type=\"submit\" onClick={this.createTextFile} color=\"danger\">Get Text</Button>\n                <label className=\"ml-3\"> Magnitude: </label>\n                <Col xs=\"3\">\n                  <Input name=\"mag\" type=\"number\" onInput={this.onInput} value={this.state.mag}></Input>\n                </Col>\n                <a href={`data:application/xml;charset=utf-8, ${JSON.stringify(this.state)}`} download=\"myProfile.json\">Save</a>\n                <Col xs=\"3\">\n                  <Input accept=\".json\" type=\"file\" onChange={this.onFileLoad}/>\n                </Col>\n              </Row>\n                  <Input type=\"textarea\" rows=\"5\" className=\"mt-3\" value={this.state.output}></Input>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}