{"version":3,"sources":["SVGpath.jsx","App.jsx","index.js"],"names":["SVGPath","componentWillMount","totalLength","getTotalLength","getOffsetLength","props","progress","this","points","reduce","total","point","i","distance","p1","p2","dy","y","dx","x","Math","sqrt","d","pathStyles","color","trace","strokeWidth","strokeDasharray","strokeDashoffset","fill","stroke","style","Component","defaultProps","startPoint","endPoint","xRange","yRange","xUiRange","yUiRange","xRatio","yRatio","Point","state","isMousePressed","position","setState","document","onmousemove","e","ex","target","name","value","ey","onInput","onmouseup","pointStyle","left","bottom","pointS","width","size","height","top","draggable","className","onMouseDown","onMouseMove","toFixed","React","PointData","idx","Input","step","type","required","placeholder","Button","onClick","onDelete","multPS","t","p","addPoints","p0","subPoints","getM","mag","p0p1","p1p2","createHermitePath","wantedPoints","slice","map","Number","getInterPoint","p3","m1","m2","getHermitePolynomFn","_","range","App","renderWantedPoints","selected","selectedPoint","editWantedPoint","key","renderPath","path","onPointInput","newPoint","onFileLoad","fileReader","FileReader","onloadend","savedState","JSON","parse","result","err","console","error","readAsText","files","createTextFile","amountOfPoints","pointsAmount","paths","flatten","xs","ys","finalXs","finalYs","Everpolate","linear","vels","yVal","push","round","abs","min","vel","finalText","join","output","addWantedPoint","preventDefault","clone","sortedPoints","sortBy","reset","max","removeWantedPoint","wantedPoint","remove","graphSizingStyle","Row","Col","transform","Table","Form","onSubmit","href","stringify","download","accept","onChange","rows","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8ea67f6f.chunk.js","sourcesContent":["import React, {Component, PropTypes} from 'react';\r\n\r\n\r\nconst DEFAULT_STROKE_WIDTH = 0.15;\r\nconst DEFAULT_STROKE_COLOR = '#e1e1e1';\r\n/**\r\n * SVGPath is an svg <path> element with utitlities\r\n *\r\n * @param {object[]} points - Array of Point objects - {x, y} - to plot this path\r\n * @param {string} color - stroke color of path\r\n * @param {number} [strokeWidth = DEFAULT_STROKE_WIDTH] - Width of the path\r\n * @param {boolean} [trace = false] - Will set the strokeDashOffset and strokeDashArray to the Path.getTotalLength\r\n *                                    so the path can appear to \"trace\" over itself\r\n * @param {number} [progress] - (min: 0, max: 1) Determines how far the \"trace\" effect has progressed. This should\r\n *                              increase in small intervals if trying to animate.\r\n * @returns {SVGPath} - svg <path> react component.\r\n */\r\nexport default class SVGPath extends Component {\r\n\r\n\r\n  static defaultProps = {\r\n    color: DEFAULT_STROKE_COLOR,\r\n    strokeWidth: DEFAULT_STROKE_WIDTH,\r\n  }\r\n\r\n  componentWillMount = () => {\r\n    this.totalLength = this.getTotalLength();\r\n  }\r\n\r\n  getOffsetLength = () => {\r\n    return this.totalLength - (\r\n      this.totalLength * this.props.progress\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Should calculate the same value as the DOM Path.getTotalLength() method\r\n   *\r\n   * @returns {number} - Total length of all points\r\n   */\r\n  getTotalLength() {\r\n    return this.props.points.reduce((total, point, i, points) => {\r\n\r\n      // if this isn't the first point\r\n      if (i) {\r\n        return this.distance(points[i - 1], point) + total;\r\n      }\r\n      return total;\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Calculate the distance between two points on a plane\r\n   *\r\n   * @param {object} p1 - first point object {x, y}\r\n   * @param {object} p2 - second point object {x, y}\r\n   * @returns {number} - distance between <p1> and <p2>\r\n   */\r\n  distance(p1, p2) {\r\n    let\r\n      dy = p1.y - p2.y,\r\n      dx = p1.x - p2.x;\r\n    // Pythagorean Theorem\r\n    return Math.sqrt(\r\n      (dx * dx) + (dy * dy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reduce all points into a string for plotting the svg <path>\r\n   *\r\n   * @returns {string} - All points to use as d attribute of an svg path\r\n   */\r\n  d() {\r\n    const {points} = this.props;\r\n\r\n    return points.reduce(\r\n      (d, point) => `${d}L${point.x},${point.y}`,\r\n      `M${points[0].x},${points[0].y}`\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {color, trace, strokeWidth} = this.props;\r\n\r\n    let pathStyles;\r\n    if (trace) {\r\n      // line needs to appear to draw itself\r\n      pathStyles = {\r\n        strokeDasharray: this.totalLength,\r\n        strokeDashoffset: this.getOffsetLength(),\r\n      };\r\n    }\r\n\r\n    return (\r\n      <path\r\n        fill=\"transparent\"\r\n        stroke={color}\r\n        strokeWidth={strokeWidth}\r\n        d={this.d()}\r\n        style={pathStyles}\r\n        />\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Input,\r\n  Form,\r\n  Table,\r\n  Container\r\n} from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport _ from 'lodash';\r\n\r\nimport SVGpath from './SVGpath';\r\nimport Everpolate from 'everpolate';\r\n\r\nimport './App.css';\r\nimport { useState } from 'react';\r\n\r\nconst startPoint = { x: 0, y: 0 };\r\nconst endPoint = { x: 10, y: 0 };\r\n\r\nconst xRange = { min: 0, max: 10 };\r\nconst yRange = { min: 0, max: 255 };\r\n\r\nconst xUiRange = { min: 0, max: 600 };\r\nconst yUiRange = { min: 0, max: 300 };\r\n\r\nconst xRatio = xUiRange.max / xRange.max;\r\nconst yRatio = yUiRange.max / yRange.max;\r\n\r\nclass Point extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isMousePressed: false,\r\n      position: { x: props.x, y: props.y },\r\n    };\r\n  }\r\n  componentWillReceiveProps(props) {\r\n    this.setState({ position: props })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isMousePressed) {\r\n      document.onmousemove = e => {\r\n        if (this.state.isMousePressed) {\r\n          const ex = { target: { name: \"x\", value: (e.x - 23)/xRatio} }\r\n          const ey = { target: { name: \"y\", value: (yUiRange.max - e.y)/yRatio } }\r\n          this.setState({ position: { x: ex.target.value , y:  ey.target.value } });\r\n          this.props.onInput(ex);\r\n          this.props.onInput(ey);\r\n        }\r\n      }\r\n\r\n      document.onmouseup = e => {\r\n        this.setState({ isMousePressed: false });\r\n      }\r\n    }\r\n\r\n    const pointStyle = {\r\n      left: `${this.state.position.x * xRatio}px`,\r\n      bottom: `${this.state.position.y * yRatio}px`,\r\n    }\r\n    const pointS = {\r\n      width: `${this.props.size}px`,\r\n      height: `${this.props.size}px`,\r\n      left: `${this.props.size/2}px`,\r\n      top: `${this.props.size/2}px`,\r\n    };\r\n    return (\r\n      <div draggable={false} style={pointStyle} className=\"wanted-point-container\" >\r\n        <div draggable={false} style={pointS}\r\n          className=\"wanted-point\"\r\n          onMouseDown={e => this.setState({ isMousePressed: true })}\r\n          onMouseMove={e => {\r\n            if (this.state.isMousePressed) {\r\n              const ex = { target: { name: \"x\", value: (e.x - 23)/xRatio.toFixed(1)} }\r\n              const ey = { target: { name: \"y\", value: (yUiRange.max - e.y + 5)/yRatio.toFixed(1) } }\r\n              this.setState({ position: { x: ex.target.value , y:  ey.target.value } });\r\n              this.props.onInput(ex);\r\n              this.props.onInput(ey);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst PointData = props => {\r\n  return (\r\n    <tr>\r\n      <td>{props.idx + 1}</td>\r\n      <td>\r\n        <Input value={props.x} step={0.5} type=\"number\" required onInput={props.onInput} name=\"x\" placeholder=\"X\"></Input>\r\n      </td>\r\n      <td>\r\n        <Input value={props.y} step={10} type=\"number\" required onInput={props.onInput} name=\"y\" placeholder=\"Y\"></Input>\r\n      </td>\r\n      <td><Button onClick={props.onDelete} className=\"btn-sm\" color=\"danger\">X</Button></td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nconst multPS = (t, p) => ({ x: t * p.x, y: t * p.y });\r\nconst addPoints = (p0, p1) => ({ x: p0.x + p1.x, y: p0.y + p1.y });\r\nconst subPoints = (p0, p1) => ({ x: p0.x - p1.x, y: p0.y - p1.y });\r\n\r\nconst getM = (p0, p1, p2, mag) => {\r\n  if (!p0 || !p1 || p1.y >= yRange.max || p1.y <= yRange.min) {\r\n    return { x: mag, y: 0 };\r\n  }\r\n  const p0p1 = multPS(1, subPoints(p1, p0));\r\n  const p1p2 = multPS(1, subPoints(p2, p1));\r\n  return multPS(0.5, addPoints(p0p1, p1p2));\r\n}\r\n\r\nconst getHermitePolynomFn = (p0, p1, p2, p3, mag) => t => {\r\n  const m1 = getM(p0, p1, p2, mag);\r\n  const m2 = getM(p1, p2, p3, mag);\r\n  const pointsToSum = [\r\n    multPS(2*t*t*t - 3*t*t +1, p1),\r\n    multPS(t*t*t -2*t*t + t, m1),\r\n    multPS(-2*t*t*t + 3*t*t, p2),\r\n    multPS(t*t*t - t*t, m2)\r\n  ];\r\n  return pointsToSum.reduce(addPoints, { x: 0, y: 0 });\r\n}\r\n\r\nconst createHermitePath = (wantedPoints, mag) => {\r\n  const pointsBetween = 100;\r\n  return wantedPoints.slice(1).map((point, idx) => {\r\n    const i = Number(idx) + 2;\r\n    const getInterPoint = getHermitePolynomFn(\r\n      wantedPoints[i-3],\r\n      wantedPoints[i-2],\r\n      wantedPoints[i-1],\r\n      wantedPoints[i],\r\n      mag\r\n    );\r\n    return _.range(0, 1, 1 / pointsBetween).map(t => getInterPoint(t));\r\n  });\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      wantedPoints: [\r\n        startPoint,\r\n        endPoint\r\n      ],\r\n      newPoint: { x: 1, y: 0 },\r\n      mag: 6,\r\n      pointsAmount: 250,\r\n      output: \"\",\r\n      selectedPoint: null\r\n    };\r\n  }\r\n  renderWantedPoints = () => {\r\n    return this.state.wantedPoints.map((point, idx) =>\r\n      <Point selected={this.state.selectedPoint === idx} onInput={this.editWantedPoint(idx)} key={`p-${idx}`} x={point.x} y={point.y}/>\r\n    )\r\n  }\r\n  renderPath = () => {\r\n    const paths = createHermitePath(this.state.wantedPoints, this.state.mag)\r\n    return paths.map(path =>\r\n      <SVGpath\r\n        className=\"path\"\r\n        color=\"#555555\"\r\n        points={path.map(point => ({ x: point.x * xRatio, y: point.y * yRatio}))}\r\n        strokeWidth={3}\r\n        progress={1}\r\n        trace={false}\r\n      />\r\n    )\r\n  }\r\n  onInput = e => {\r\n    const { name, value } = e.target;\r\n    const state = this.state;\r\n    state[name] = value\r\n    this.setState(state);\r\n  }\r\n  onPointInput = e => {\r\n    const { name, value } = e.target;\r\n    const { newPoint }= this.state;\r\n    newPoint[name] = value;\r\n    this.setState({ newPoint })\r\n  }\r\n  onFileLoad = e => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onloadend = () => {\r\n      try {\r\n        const savedState = JSON.parse(fileReader.result);\r\n        this.setState(savedState);\r\n      } catch(err) {\r\n        console.error(\"Json is corrupted\");\r\n      }\r\n    }\r\n\r\n    fileReader.readAsText(e.target.files[0]);\r\n  }\r\n  createTextFile = () => {\r\n    const amountOfPoints = this.state.pointsAmount;\r\n    const step = xRange.max / amountOfPoints;\r\n    const paths = createHermitePath(this.state.wantedPoints, this.state.mag);\r\n    const path = _.flatten(paths);\r\n    const xs = path.map(point => point.x);\r\n    const ys = path.map(point => point.y);\r\n    let finalXs = _.range(0, xRange.max, step);\r\n    let finalYs = Everpolate.linear(finalXs, xs, ys);\r\n    let vels = finalYs.slice(1).map((yVal, idx) => (yVal - finalYs[idx]) / step);\r\n    vels.push(0);\r\n    finalYs = finalYs.map(Math.round).map(Math.abs).map(yVal => Math.min(yVal, yRange.max));\r\n    vels = vels.map(vel => vel / 5).map(vel => vel + 128).map(Math.round);\r\n\r\n    const posPrefix = \"byte pos[profile_length]={\";\r\n    const velPrefix = \"byte vel[profile_length]={\";\r\n    const posEnd = \"};\";\r\n    const finalText = `${posPrefix}${finalYs.join(\",\")}${posEnd}\\n${velPrefix}${vels.join(\",\")}${posEnd}`;\r\n\r\n    this.setState({ output: finalText });\r\n  }\r\n  addWantedPoint = e => {\r\n    e.preventDefault();\r\n    const { wantedPoints, newPoint } = this.state;\r\n    wantedPoints.push(_.clone(newPoint));\r\n    const sortedPoints = _.sortBy(wantedPoints, point => Number(point.x));\r\n    newPoint.x = Number(newPoint.x) + 1;\r\n    this.setState({ wantedPoints: sortedPoints, newPoint });\r\n    e.target.reset();\r\n  }\r\n  editWantedPoint = idx => e => {\r\n    const { name, value } = e.target;\r\n    const { wantedPoints } = this.state;\r\n    wantedPoints[idx][name] = Math.max(value, 0);\r\n    this.setState({ wantedPoints, selectedPoint: idx });\r\n  }\r\n  removeWantedPoint = point => () => {\r\n    const { wantedPoints } = this.state;\r\n    this.setState({ wantedPoint: _.remove(wantedPoints, point) });\r\n  }\r\n\r\n  render() {\r\n    const graphSizingStyle = {\r\n      width: `${xUiRange.max - xUiRange.min}px`,\r\n      height: `${yUiRange.max - yUiRange.min}px`\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"ml-4 mr-4 app\">\r\n          <Row>\r\n          <Col xs=\"6\">\r\n          <div style={graphSizingStyle} className=\"graph-area\">\r\n            {this.renderWantedPoints()}\r\n            <svg style={graphSizingStyle} transform=\"scale(1,-1)\">\r\n              {this.renderPath()}\r\n            </svg>\r\n          </div></Col>\r\n          <Col xs=\"6\" className=\"text-center\">\r\n            <Table className=\"main-table table-bordered table-sm mt-4\">\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>X</th>\r\n                  <th>Y</th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.wantedPoints.map((point, idx) => (\r\n                  <PointData\r\n                    onDelete={this.removeWantedPoint(point)}\r\n                    onInput={this.editWantedPoint(idx)}\r\n                    idx={idx}\r\n                    key={`pd-${idx}`}\r\n                    x={point.x}\r\n                    y={point.y}\r\n                  />\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs=\"6\">\r\n              <Form onSubmit={this.addWantedPoint}>\r\n                <Row className=\"mt-4\">\r\n                  <Col>\r\n                    <Input value={this.state.newPoint.x} type=\"number\" required onInput={this.onPointInput} name=\"x\" placeholder=\"X\"></Input>\r\n                  </Col>\r\n                  <Col>\r\n                    <Input type=\"number\" required onInput={this.onPointInput} name=\"y\" placeholder=\"Y\"></Input>\r\n                  </Col>\r\n                  <Button type=\"submit\" color=\"success\">+</Button>\r\n                </Row>\r\n              </Form>\r\n              <Row className=\"justify-content-center mt-4\">\r\n                <label className=\"ml-3\"> Output points: </label>\r\n                <Col xs=\"3\">\r\n                  <Input name=\"pointsAmount\" onInput={this.onInput} value={this.state.pointsAmount}/>\r\n                </Col>\r\n                <label className=\"ml-3\"> Magnitude: </label>\r\n                <Col xs=\"3\">\r\n                  <Input name=\"mag\" type=\"number\" onInput={this.onInput} value={this.state.mag}></Input>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"justify-content-around mt-3\">\r\n                <Button type=\"submit\" onClick={this.createTextFile} color=\"danger\">Get Text</Button>\r\n                <a href={`data:application/xml;charset=utf-8, ${JSON.stringify(this.state)}`} download=\"myProfile.json\">Save</a>\r\n                <Col xs=\"5\">\r\n                  <Input accept=\".json\" type=\"file\" onChange={this.onFileLoad}/>\r\n                </Col>\r\n              </Row>\r\n              <Input type=\"textarea\" rows=\"5\" className=\"mt-3\" value={this.state.output}></Input>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}